// Code generated by protoc-gen-go.
// source: tsp.proto
// DO NOT EDIT!

/*
Package tsp is a generated protocol buffer package.

It is generated from these files:
	tsp.proto

It has these top-level messages:
	Empty
	RegisterClusterRequest
	RegisterClusterResponse
	CreateUserRequest
	User
*/
package tsp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RegisterClusterRequest struct {
	UserToken string `protobuf:"bytes,1,opt,name=UserToken" json:"UserToken,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
	Subdomain string `protobuf:"bytes,3,opt,name=Subdomain" json:"Subdomain,omitempty"`
}

func (m *RegisterClusterRequest) Reset()                    { *m = RegisterClusterRequest{} }
func (m *RegisterClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterClusterRequest) ProtoMessage()               {}
func (*RegisterClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RegisterClusterResponse struct {
	OtpToken string `protobuf:"bytes,1,opt,name=otp_token,json=otpToken" json:"otp_token,omitempty"`
}

func (m *RegisterClusterResponse) Reset()                    { *m = RegisterClusterResponse{} }
func (m *RegisterClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterClusterResponse) ProtoMessage()               {}
func (*RegisterClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CreateUserRequest struct {
	Username    string            `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	FirstName   string            `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName    string            `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Email       string            `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	MobilePhone string            `protobuf:"bytes,5,opt,name=mobile_phone,json=mobilePhone" json:"mobile_phone,omitempty"`
	Password    string            `protobuf:"bytes,6,opt,name=password" json:"password,omitempty"`
	Group       string            `protobuf:"bytes,7,opt,name=group" json:"group,omitempty"`
	Fields      map[string]string `protobuf:"bytes,8,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateUserRequest) GetFields() map[string]string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type User struct {
	UserId      int32             `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Username    string            `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	FirstName   string            `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName    string            `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Email       string            `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	MobilePhone string            `protobuf:"bytes,6,opt,name=mobile_phone,json=mobilePhone" json:"mobile_phone,omitempty"`
	Group       string            `protobuf:"bytes,7,opt,name=group" json:"group,omitempty"`
	Fields      map[string]string `protobuf:"bytes,8,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *User) GetFields() map[string]string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "tsp.Empty")
	proto.RegisterType((*RegisterClusterRequest)(nil), "tsp.RegisterClusterRequest")
	proto.RegisterType((*RegisterClusterResponse)(nil), "tsp.RegisterClusterResponse")
	proto.RegisterType((*CreateUserRequest)(nil), "tsp.CreateUserRequest")
	proto.RegisterType((*User)(nil), "tsp.User")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for TSP service

type TSPClient interface {
	RegisterCluster(ctx context.Context, in *RegisterClusterRequest, opts ...grpc.CallOption) (*RegisterClusterResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
}

type tSPClient struct {
	cc *grpc.ClientConn
}

func NewTSPClient(cc *grpc.ClientConn) TSPClient {
	return &tSPClient{cc}
}

func (c *tSPClient) RegisterCluster(ctx context.Context, in *RegisterClusterRequest, opts ...grpc.CallOption) (*RegisterClusterResponse, error) {
	out := new(RegisterClusterResponse)
	err := grpc.Invoke(ctx, "/tsp.TSP/RegisterCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSPClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/tsp.TSP/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSPClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/tsp.TSP/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSPClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/tsp.TSP/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TSP service

type TSPServer interface {
	RegisterCluster(context.Context, *RegisterClusterRequest) (*RegisterClusterResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *User) (*Empty, error)
}

func RegisterTSPServer(s *grpc.Server, srv TSPServer) {
	s.RegisterService(&_TSP_serviceDesc, srv)
}

func _TSP_RegisterCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSPServer).RegisterCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsp.TSP/RegisterCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSPServer).RegisterCluster(ctx, req.(*RegisterClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSP_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSPServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsp.TSP/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSPServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSP_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSPServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsp.TSP/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSPServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSP_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSPServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsp.TSP/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSPServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _TSP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tsp.TSP",
	HandlerType: (*TSPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCluster",
			Handler:    _TSP_RegisterCluster_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _TSP_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _TSP_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _TSP_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("tsp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0x6d, 0x93, 0x26, 0x4d, 0x7e, 0x45, 0x02, 0x2c, 0xd8, 0xa2, 0x74, 0x48, 0xc3, 0x02, 0x69,
	0x17, 0x2a, 0x31, 0x24, 0x04, 0xbb, 0x8e, 0x21, 0x71, 0x99, 0xaa, 0x6c, 0x3b, 0x57, 0xa9, 0xf2,
	0xdb, 0x88, 0x96, 0xc4, 0xc6, 0x76, 0x40, 0xfd, 0x56, 0x7c, 0x11, 0x8e, 0x7c, 0x1f, 0x64, 0x7b,
	0x6e, 0xb7, 0x26, 0xf4, 0xb4, 0x53, 0xfc, 0xde, 0xf3, 0xef, 0xdf, 0xb3, 0x63, 0x88, 0x95, 0xe4,
	0x33, 0x2e, 0x98, 0x62, 0xc4, 0x57, 0x92, 0xd3, 0x31, 0x04, 0x67, 0x35, 0x57, 0x2b, 0xca, 0x61,
	0x2f, 0xc3, 0x9b, 0x52, 0x2a, 0x14, 0xa7, 0x55, 0xab, 0x3f, 0x19, 0xfe, 0x68, 0x51, 0x2a, 0x72,
	0x00, 0xf1, 0x95, 0x44, 0x71, 0xc9, 0x6e, 0xb1, 0x49, 0x86, 0x87, 0xc3, 0xa3, 0x38, 0xdb, 0x10,
	0x24, 0x85, 0x68, 0x9e, 0x4b, 0xf9, 0x8b, 0x89, 0x22, 0xf1, 0x8c, 0xb8, 0xc6, 0x3a, 0xf2, 0xa2,
	0x5d, 0x16, 0xac, 0xce, 0xcb, 0x26, 0xf1, 0x6d, 0xe4, 0x9a, 0xa0, 0x1f, 0x61, 0xbf, 0x53, 0x51,
	0x72, 0xd6, 0x48, 0x24, 0x53, 0x88, 0x99, 0xe2, 0x0b, 0x75, 0xaf, 0x64, 0xc4, 0x14, 0x37, 0x15,
	0xe9, 0x1f, 0x0f, 0x9e, 0x9f, 0x0a, 0xcc, 0x15, 0xea, 0x2e, 0x5c, 0x97, 0x29, 0x44, 0xad, 0x44,
	0xd1, 0xe4, 0x35, 0xba, 0x08, 0x87, 0xc9, 0x2b, 0x80, 0xeb, 0x52, 0x48, 0xb5, 0x30, 0xaa, 0xed,
	0x32, 0x36, 0xcc, 0xb9, 0x96, 0xa7, 0x10, 0x57, 0xb9, 0x53, 0x6d, 0x9b, 0x91, 0x26, 0x8c, 0xf8,
	0x02, 0x02, 0xac, 0xf3, 0xb2, 0x4a, 0x46, 0x46, 0xb0, 0x80, 0xbc, 0x86, 0x27, 0x35, 0x5b, 0x96,
	0x15, 0x2e, 0xf8, 0x77, 0xd6, 0x60, 0x12, 0x18, 0x71, 0x62, 0xb9, 0xb9, 0xa6, 0x74, 0x43, 0xdc,
	0x19, 0x13, 0xda, 0xa4, 0x0e, 0xeb, 0xa4, 0x37, 0x82, 0xb5, 0x3c, 0x19, 0xdb, 0xa4, 0x06, 0x90,
	0x13, 0x08, 0xaf, 0x4b, 0xac, 0x0a, 0x99, 0x44, 0x87, 0xfe, 0xd1, 0xe4, 0x98, 0xce, 0xf4, 0x61,
	0x75, 0x46, 0x9d, 0x7d, 0x35, 0x9b, 0xce, 0x1a, 0x25, 0x56, 0xd9, 0x5d, 0x44, 0xfa, 0x19, 0x26,
	0xf7, 0x68, 0xf2, 0x0c, 0xfc, 0x5b, 0x5c, 0xdd, 0x19, 0xa1, 0x97, 0xba, 0xe4, 0xcf, 0xbc, 0x6a,
	0xdd, 0xf8, 0x16, 0x9c, 0x78, 0x9f, 0x86, 0xf4, 0xb7, 0x07, 0x23, 0x9d, 0x9e, 0xec, 0xc3, 0x58,
	0x5b, 0xb6, 0x28, 0x0b, 0x13, 0x18, 0x64, 0xa1, 0x86, 0xdf, 0x8a, 0x07, 0xde, 0x7a, 0x3b, 0xbd,
	0xf5, 0x77, 0x7a, 0x3b, 0xfa, 0x9f, 0xb7, 0xc1, 0x2e, 0x6f, 0xc3, 0xae, 0xb7, 0xfd, 0xfe, 0xbd,
	0xdb, 0xf2, 0xef, 0xa5, 0xf1, 0x4f, 0x8f, 0xf6, 0xc8, 0x96, 0x1d, 0xff, 0x1d, 0x82, 0x7f, 0x79,
	0x31, 0x27, 0xe7, 0xf0, 0x74, 0xeb, 0x0a, 0x93, 0xa9, 0x29, 0xda, 0xff, 0x2b, 0xa5, 0x07, 0xfd,
	0xa2, 0xbd, 0xf5, 0x74, 0x40, 0xde, 0x03, 0x6c, 0x8e, 0x9b, 0xec, 0xf5, 0x9f, 0x7f, 0x1a, 0xaf,
	0xe7, 0xa2, 0x03, 0xf2, 0x06, 0xe0, 0x8a, 0x17, 0x2e, 0x64, 0x23, 0x3d, 0xdc, 0xf5, 0x16, 0xe0,
	0x0b, 0x56, 0xd8, 0xdd, 0x05, 0x66, 0x69, 0x9f, 0x80, 0xc1, 0x32, 0x34, 0x2f, 0xc3, 0x87, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x87, 0x94, 0xa8, 0x51, 0x26, 0x04, 0x00, 0x00,
}
