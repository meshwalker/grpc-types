// Code generated by protoc-gen-go.
// source: reco.proto
// DO NOT EDIT!

/*
Package reco is a generated protocol buffer package.

It is generated from these files:
	reco.proto

It has these top-level messages:
	Empty
	SetupClusterRequest
	SetupClusterReesponse
	StatusMsg
	RegisterAdminRequest
	ClusterStatusResponse
	AddNodeRequest
	MemberListUpdateRequest
	ErrorMsg
*/
package reco

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SetupClusterRequest struct {
	Otp string `protobuf:"bytes,1,opt,name=otp" json:"otp,omitempty"`
}

func (m *SetupClusterRequest) Reset()                    { *m = SetupClusterRequest{} }
func (m *SetupClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*SetupClusterRequest) ProtoMessage()               {}
func (*SetupClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SetupClusterReesponse struct {
	Status string    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Errors *ErrorMsg `protobuf:"bytes,2,opt,name=errors" json:"errors,omitempty"`
}

func (m *SetupClusterReesponse) Reset()                    { *m = SetupClusterReesponse{} }
func (m *SetupClusterReesponse) String() string            { return proto.CompactTextString(m) }
func (*SetupClusterReesponse) ProtoMessage()               {}
func (*SetupClusterReesponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetupClusterReesponse) GetErrors() *ErrorMsg {
	if m != nil {
		return m.Errors
	}
	return nil
}

type StatusMsg struct {
	Status string    `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Msg    string    `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Errors *ErrorMsg `protobuf:"bytes,3,opt,name=errors" json:"errors,omitempty"`
}

func (m *StatusMsg) Reset()                    { *m = StatusMsg{} }
func (m *StatusMsg) String() string            { return proto.CompactTextString(m) }
func (*StatusMsg) ProtoMessage()               {}
func (*StatusMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatusMsg) GetErrors() *ErrorMsg {
	if m != nil {
		return m.Errors
	}
	return nil
}

type RegisterAdminRequest struct {
	Username    string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	FirstName   string `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName    string `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	PhoneNumber string `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
}

func (m *RegisterAdminRequest) Reset()                    { *m = RegisterAdminRequest{} }
func (m *RegisterAdminRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterAdminRequest) ProtoMessage()               {}
func (*RegisterAdminRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ClusterStatusResponse struct {
	Status      bool              `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	ClusterName string            `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	Tsp         map[string]string `protobuf:"bytes,3,rep,name=tsp" json:"tsp,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	InternetCon bool              `protobuf:"varint,4,opt,name=internet_con,json=internetCon" json:"internet_con,omitempty"`
	ExternalIp  string            `protobuf:"bytes,5,opt,name=external_ip,json=externalIp" json:"external_ip,omitempty"`
	NumUsers    int32             `protobuf:"varint,6,opt,name=num_users,json=numUsers" json:"num_users,omitempty"`
	Members     map[string]string `protobuf:"bytes,7,rep,name=members" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ClusterStatusResponse) Reset()                    { *m = ClusterStatusResponse{} }
func (m *ClusterStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterStatusResponse) ProtoMessage()               {}
func (*ClusterStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClusterStatusResponse) GetTsp() map[string]string {
	if m != nil {
		return m.Tsp
	}
	return nil
}

func (m *ClusterStatusResponse) GetMembers() map[string]string {
	if m != nil {
		return m.Members
	}
	return nil
}

type AddNodeRequest struct {
	Otp      string `protobuf:"bytes,1,opt,name=otp" json:"otp,omitempty"`
	MasterIp string `protobuf:"bytes,2,opt,name=master_ip,json=masterIp" json:"master_ip,omitempty"`
}

func (m *AddNodeRequest) Reset()                    { *m = AddNodeRequest{} }
func (m *AddNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*AddNodeRequest) ProtoMessage()               {}
func (*AddNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type MemberListUpdateRequest struct {
	OldIp string `protobuf:"bytes,1,opt,name=old_ip,json=oldIp" json:"old_ip,omitempty"`
	NewIp string `protobuf:"bytes,2,opt,name=new_ip,json=newIp" json:"new_ip,omitempty"`
}

func (m *MemberListUpdateRequest) Reset()                    { *m = MemberListUpdateRequest{} }
func (m *MemberListUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*MemberListUpdateRequest) ProtoMessage()               {}
func (*MemberListUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ErrorMsg struct {
	Msg []string `protobuf:"bytes,1,rep,name=msg" json:"msg,omitempty"`
}

func (m *ErrorMsg) Reset()                    { *m = ErrorMsg{} }
func (m *ErrorMsg) String() string            { return proto.CompactTextString(m) }
func (*ErrorMsg) ProtoMessage()               {}
func (*ErrorMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*Empty)(nil), "reco.Empty")
	proto.RegisterType((*SetupClusterRequest)(nil), "reco.SetupClusterRequest")
	proto.RegisterType((*SetupClusterReesponse)(nil), "reco.SetupClusterReesponse")
	proto.RegisterType((*StatusMsg)(nil), "reco.StatusMsg")
	proto.RegisterType((*RegisterAdminRequest)(nil), "reco.RegisterAdminRequest")
	proto.RegisterType((*ClusterStatusResponse)(nil), "reco.ClusterStatusResponse")
	proto.RegisterType((*AddNodeRequest)(nil), "reco.AddNodeRequest")
	proto.RegisterType((*MemberListUpdateRequest)(nil), "reco.MemberListUpdateRequest")
	proto.RegisterType((*ErrorMsg)(nil), "reco.ErrorMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Reco service

type RecoClient interface {
	SetupCluster(ctx context.Context, in *SetupClusterRequest, opts ...grpc.CallOption) (*SetupClusterReesponse, error)
	AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*StatusMsg, error)
	// rpc BroadcastIP(MemberListUpdateRequest) returns (StatusMsg) {}
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClusterStatusResponse, error)
}

type recoClient struct {
	cc *grpc.ClientConn
}

func NewRecoClient(cc *grpc.ClientConn) RecoClient {
	return &recoClient{cc}
}

func (c *recoClient) SetupCluster(ctx context.Context, in *SetupClusterRequest, opts ...grpc.CallOption) (*SetupClusterReesponse, error) {
	out := new(SetupClusterReesponse)
	err := grpc.Invoke(ctx, "/reco.Reco/SetupCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recoClient) AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/reco.Reco/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recoClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClusterStatusResponse, error) {
	out := new(ClusterStatusResponse)
	err := grpc.Invoke(ctx, "/reco.Reco/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reco service

type RecoServer interface {
	SetupCluster(context.Context, *SetupClusterRequest) (*SetupClusterReesponse, error)
	AddNode(context.Context, *AddNodeRequest) (*StatusMsg, error)
	// rpc BroadcastIP(MemberListUpdateRequest) returns (StatusMsg) {}
	Status(context.Context, *Empty) (*ClusterStatusResponse, error)
}

func RegisterRecoServer(s *grpc.Server, srv RecoServer) {
	s.RegisterService(&_Reco_serviceDesc, srv)
}

func _Reco_SetupCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoServer).SetupCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reco.Reco/SetupCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoServer).SetupCluster(ctx, req.(*SetupClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reco_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reco.Reco/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoServer).AddNode(ctx, req.(*AddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reco_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecoServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reco.Reco/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecoServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reco_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reco.Reco",
	HandlerType: (*RecoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupCluster",
			Handler:    _Reco_SetupCluster_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _Reco_AddNode_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Reco_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reco.proto",
}

func init() { proto.RegisterFile("reco.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0x66, 0x59, 0xfa, 0x77, 0xb6, 0x41, 0x32, 0x82, 0xae, 0x45, 0x63, 0xd9, 0x18, 0xed, 0x55,
	0x2f, 0xaa, 0x21, 0x86, 0x1b, 0x03, 0x84, 0x68, 0x13, 0x21, 0x66, 0x91, 0x78, 0x65, 0x9a, 0xa5,
	0x7b, 0x2c, 0x1b, 0x76, 0x67, 0xc6, 0x99, 0x59, 0x6b, 0x9f, 0xc7, 0x6b, 0x5f, 0xc0, 0xa7, 0x33,
	0xf3, 0x57, 0x21, 0x29, 0x24, 0xde, 0xcd, 0xf9, 0xce, 0x7c, 0xe7, 0xe7, 0x9b, 0x73, 0x06, 0x40,
	0xe0, 0x94, 0x0d, 0xb9, 0x60, 0x8a, 0x91, 0x0d, 0x7d, 0x4e, 0x5a, 0xd0, 0x38, 0xa9, 0xb8, 0x5a,
	0x24, 0xaf, 0xe0, 0xe1, 0x39, 0xaa, 0x9a, 0x1f, 0x97, 0xb5, 0x54, 0x28, 0x52, 0xfc, 0x5e, 0xa3,
	0x54, 0x64, 0x0b, 0x42, 0xa6, 0x78, 0x1c, 0xf4, 0x83, 0x41, 0x27, 0xd5, 0xc7, 0xe4, 0x0b, 0xec,
	0xdc, 0xbe, 0x88, 0x92, 0x33, 0x2a, 0x91, 0x3c, 0x82, 0xa6, 0x54, 0x99, 0xaa, 0xa5, 0xbb, 0xed,
	0x2c, 0xf2, 0x12, 0x9a, 0x28, 0x04, 0x13, 0x32, 0x5e, 0xef, 0x07, 0x83, 0x68, 0xb4, 0x39, 0x34,
	0x55, 0x9c, 0x68, 0xec, 0x54, 0xce, 0x52, 0xe7, 0x4d, 0xbe, 0x42, 0xe7, 0xdc, 0x30, 0x4e, 0xe5,
	0xec, 0xce, 0x60, 0x5b, 0x10, 0x56, 0x72, 0x66, 0x22, 0x75, 0x52, 0x7d, 0xbc, 0x11, 0x3e, 0xbc,
	0x37, 0xfc, 0xef, 0x00, 0xb6, 0x53, 0x9c, 0x15, 0xba, 0xe8, 0xc3, 0xbc, 0x2a, 0xa8, 0x6f, 0xb1,
	0x07, 0xed, 0x5a, 0xa2, 0xa0, 0x59, 0x85, 0x2e, 0xd9, 0xd2, 0xd6, 0x3e, 0x9e, 0x49, 0x39, 0x67,
	0x22, 0x77, 0x39, 0x97, 0x36, 0x79, 0x06, 0xf0, 0xad, 0x10, 0x52, 0x4d, 0x0c, 0x33, 0x34, 0xde,
	0x8e, 0x41, 0xce, 0x34, 0x75, 0x17, 0x3a, 0x65, 0xe6, 0xbd, 0x1b, 0x96, 0xab, 0x01, 0xe3, 0xdc,
	0x83, 0x2e, 0xbf, 0x62, 0x14, 0x27, 0xb4, 0xae, 0x2e, 0x51, 0xc4, 0x0d, 0xe3, 0x8f, 0x0c, 0x76,
	0x66, 0xa0, 0xe4, 0x57, 0x08, 0x3b, 0x4e, 0x63, 0x2b, 0x4b, 0xba, 0x5a, 0xe8, 0xf6, 0x52, 0x9b,
	0x3d, 0xe8, 0x4e, 0x2d, 0xc1, 0x26, 0xb5, 0x05, 0x47, 0x0e, 0x33, 0x79, 0xf7, 0x21, 0x54, 0x92,
	0xc7, 0x61, 0x3f, 0x1c, 0x44, 0xa3, 0x17, 0x56, 0xa9, 0x95, 0x49, 0x86, 0x9f, 0x25, 0x3f, 0xa1,
	0x4a, 0x2c, 0x52, 0x4d, 0xd0, 0xa1, 0x0b, 0xaa, 0x50, 0x50, 0x54, 0x93, 0x29, 0xa3, 0xa6, 0x9f,
	0x76, 0x1a, 0x79, 0xec, 0x98, 0x51, 0xf2, 0x1c, 0x22, 0xfc, 0xa9, 0xcd, 0xac, 0x9c, 0x14, 0xdc,
	0x75, 0x04, 0x1e, 0x1a, 0x73, 0x2d, 0x08, 0xad, 0xab, 0x89, 0xd6, 0x56, 0xc6, 0xcd, 0x7e, 0x30,
	0x68, 0xa4, 0x6d, 0x5a, 0x57, 0x17, 0xda, 0x26, 0x47, 0xd0, 0xaa, 0x50, 0xf7, 0x2d, 0xe3, 0x96,
	0x29, 0x6e, 0x70, 0x5f, 0x71, 0xa7, 0xf6, 0xaa, 0x2d, 0xd0, 0x13, 0x7b, 0xfb, 0xd0, 0xf6, 0x55,
	0xeb, 0x39, 0xb9, 0xc6, 0x85, 0x9f, 0xdb, 0x6b, 0x5c, 0x90, 0x6d, 0x68, 0xfc, 0xc8, 0xca, 0xda,
	0xcb, 0x62, 0x8d, 0x83, 0xf5, 0xb7, 0x41, 0xef, 0x00, 0xba, 0x37, 0x03, 0xfe, 0x0f, 0x37, 0x79,
	0x07, 0x9b, 0x87, 0x79, 0x7e, 0xc6, 0x72, 0xbc, 0x73, 0x63, 0x74, 0xe3, 0x55, 0x66, 0x9e, 0xa5,
	0xe0, 0x7e, 0x8a, 0x2c, 0x30, 0xe6, 0xc9, 0x7b, 0x78, 0x6c, 0x93, 0x7f, 0x2c, 0xa4, 0xba, 0xe0,
	0x79, 0xa6, 0x96, 0x91, 0x76, 0xa0, 0xc9, 0xca, 0x5c, 0x93, 0x6c, 0xb0, 0x06, 0x2b, 0xf3, 0x31,
	0xd7, 0x30, 0xc5, 0xf9, 0xbf, 0x58, 0x0d, 0x8a, 0xf3, 0x31, 0x4f, 0x9e, 0x42, 0xdb, 0xcf, 0xbc,
	0xdf, 0x92, 0xa0, 0x1f, 0xba, 0x2d, 0x19, 0xfd, 0x09, 0x60, 0x23, 0xc5, 0x29, 0x23, 0x1f, 0xa0,
	0x7b, 0x73, 0x7d, 0xc9, 0x13, 0xab, 0xf3, 0x8a, 0xdd, 0xef, 0xed, 0xae, 0x72, 0xb9, 0x27, 0x48,
	0xd6, 0xc8, 0x08, 0x5a, 0xae, 0x75, 0xb2, 0x6d, 0x6f, 0xde, 0x56, 0xa2, 0xf7, 0xc0, 0xf1, 0xfd,
	0x52, 0x27, 0x6b, 0xe4, 0x0d, 0x34, 0xad, 0x49, 0x22, 0xb7, 0xa6, 0xfa, 0xf3, 0xf1, 0x99, 0x56,
	0x3e, 0x76, 0xb2, 0x76, 0x94, 0x40, 0x3c, 0x65, 0xd5, 0xb0, 0x42, 0x79, 0x35, 0xcf, 0xca, 0x6b,
	0x14, 0xc3, 0x99, 0xe0, 0x53, 0xc3, 0x39, 0x32, 0xdf, 0xd8, 0xa7, 0xe0, 0xb2, 0x69, 0x7e, 0xb5,
	0xd7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x22, 0xe6, 0xc0, 0xac, 0xe3, 0x04, 0x00, 0x00,
}
